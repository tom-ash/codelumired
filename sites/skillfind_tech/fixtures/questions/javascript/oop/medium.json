[
  {
    "id": "20fc6e0c-6df1-4b16-b598-f136debe0b69",
    "category": "javascript",
    "type": "multipleChoice",
    "difficulty": "medium",
    "title": "JavaScript Object-Oriented Programming (OOP)",
    "body": "Which of the following concepts are related to Object-Oriented Programming (OOP) in JavaScript?",
    "answers": [
      {
        "id": "297e7e8c-06c2-4c46-8e12-8bbdc9b3c8b3",
        "sequenceLetter": "a",
        "body": "Inheritance",
        "isCorrect": true
      },
      {
        "id": "d5e78a82-2e82-4e5e-b7ac-6a7e6ef36e82",
        "sequenceLetter": "b",
        "body": "Polymorphism",
        "isCorrect": true
      },
      {
        "id": "8c17a878-b3d1-4f8f-b89a-b1d9686b1b57",
        "sequenceLetter": "c",
        "body": "Encapsulation",
        "isCorrect": true
      },
      {
        "id": "b0599d97-0fc6-4a85-84e3-105b15b1089a",
        "sequenceLetter": "d",
        "body": "Prototypes",
        "isCorrect": true
      },
      {
        "id": "3b03f8cc-d4d3-43a4-bd2e-fc8f6ce3ed9b",
        "sequenceLetter": "e",
        "body": "Abstraction",
        "isCorrect": true
      },
      {
        "id": "1cb9c6e2-7ea1-47d0-8d35-e6ce0f8ba71e",
        "sequenceLetter": "f",
        "body": "Callback functions",
        "isCorrect": false
      }
    ],
    "hint": "Explore the principles of Object-Oriented Programming in JavaScript. For an introduction, check out [this link](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects).",
    "explanation": "Object-Oriented Programming (OOP) is a programming paradigm that uses objects to organize code. In JavaScript, these concepts include:\n\n- **Inheritance**: A mechanism where a new class inherits properties and behaviors from an existing class.\n- **Polymorphism**: The ability of an object to take on multiple forms or types.\n- **Encapsulation**: Bundling the data (properties) and the methods (functions) that work on the data into a single unit (object).\n- **Prototypes**: JavaScript objects have a prototype, and they inherit properties and behaviors from it.\n- **Abstraction**: Simplifying complex systems by modeling classes based on the essential properties and behaviors they share.\n\nUnderstanding these principles is crucial for effective JavaScript development, enabling you to create maintainable, scalable, and modular code.",
    "reading": [
      {
        "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects",
        "title": "MDN Web Docs - JavaScript Objects"
      },
      {
        "link": "https://javascript.info/object",
        "title": "JavaScript.info - Objects"
      },
      {
        "link": "https://www.w3schools.com/js/js_objects.asp",
        "title": "W3Schools - JavaScript Objects"
      }
    ]
  },
  {
    "id": "c01b2e20-2a34-4dfb-8a1f-5019bd822f8b",
    "difficulty": "medium",
    "category": "javascript",
    "type": "multipleChoice",
    "description": "Evaluate your understanding of JavaScript promises with this thought-provoking question.",
    "title": "JavaScript Promises Challenge",
    "body": "Consider the following JavaScript code snippet:\n\n```javascript\nfunction asyncOperation() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Operation completed successfully.');\n    }, 2000);\n  });\n}\n\nasync function executeOperation() {\n  try {\n    const result = await asyncOperation();\n    console.log(result);\n  } catch (error) {\n    console.error('Error during operation:', error);\n  }\n}\n\nexecuteOperation();\n``` \n\nWhat will be logged to the console when `executeOperation` is called?",
    "answers": [
      {
        "id": "0fcb635d-c09d-4bb1-bb41-5ebd7d0842cc",
        "sequenceLetter": "a",
        "body": "'Operation completed successfully.'",
        "isCorrect": true
      },
      {
        "id": "2e0aa074-0b09-4b6f-a818-b6d176aa00b7",
        "sequenceLetter": "b",
        "body": "Promise { <pending> }",
        "isCorrect": false
      },
      {
        "id": "b4689d3b-5c61-414f-bb85-539a3e6f0ecb",
        "sequenceLetter": "c",
        "body": "Error during operation: undefined",
        "isCorrect": false
      },
      {
        "id": "e1c6e122-4572-44f1-a51f-5c02c318e763",
        "sequenceLetter": "d",
        "body": "SyntaxError: missing catch or finally clause",
        "isCorrect": false
      },
      {
        "id": "72e3508a-894d-43ce-a222-c5594879b46a",
        "sequenceLetter": "e",
        "body": "undefined",
        "isCorrect": false
      },
      {
        "id": "6759cfaf-8b29-43e0-b9f1-0c09f1cc38f5",
        "sequenceLetter": "f",
        "body": "Error during operation: 'Operation completed successfully.'",
        "isCorrect": true
      }
    ],
    "hint": "Consider the use of asynchronous functions, promises, and the `await` keyword in JavaScript.",
    "explanation": "Explanation: The `asyncOperation` function returns a promise that resolves after a 2000 ms timeout. The `executeOperation` function logs the resolved value when the promise is successfully fulfilled. Since the promise resolves with the string 'Operation completed successfully.', this value is logged to the console.",
    "reading": [
      {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "title": "MDN Web Docs - async function"
      },
      {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "title": "MDN Web Docs - Promise"
      },
      {
        "link": "https://javascript.info/async-await",
        "title": "JavaScript.info - Async/await"
      }
    ]
  }
]

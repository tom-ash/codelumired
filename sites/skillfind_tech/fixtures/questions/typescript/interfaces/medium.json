[
  {
    "id": "0c3a8442-52d1-4e9b-9fc1-0dbd54c145c1",
    "difficulty": "medium",
    "type": "multipleChoice",
    "category": "typescript",
    "description": "Test your TypeScript knowledge with this medium-difficulty question about TypeScript features and syntax.",
    "title": "Interface Personal Greeting",
    "body": "Consider the following TypeScript code snippet:\n\n```typescript\ninterface Person {\n  name: string;\n  age: number;\n}\n\nfunction greet(person: Person): string {\n  return `Hello, ${person.name}! You are ${person.age} years old.`;\n}\n\nconst john: Person = { name: 'John', age: 30 };\nconst greeting = greet(john);\n``` \n\nWhich of the following statements about the given TypeScript code are correct?",
    "answers": [
      {
        "id": "35a368a8-8b14-4dd5-8a9a-4fe8e2c9e9b4",
        "body": "The `Person` interface defines a structure with `name` and `age` properties.",
        "isCorrect": true,
        "explanation": "Correctly selected! The `Person` interface indeed specifies that an object must have `name` and `age` properties."
      },
      {
        "id": "be00584a-5c1c-4a22-97c2-2ec0a9ebd69d",
        "body": "The `greet` function returns a string with a greeting message.",
        "isCorrect": true,
        "explanation": "Correctly selected! The `greet` function takes a `Person` object as a parameter and returns a string greeting based on its properties."
      },
      {
        "id": "e50fc07f-979c-4bf7-9d18-8c094e9c75ac",
        "body": "The `greet` function can be called with an object that has additional properties.",
        "isCorrect": false,
        "explanation": "Correctly omitted. TypeScript enforces that the `greet` function is called with an object conforming to the `Person` interface, which includes only `name` and `age`."
      },
      {
        "id": "15cf7a5e-647d-4bf0-80e8-6d7a7b3d59d8",
        "body": "The `john` object is missing the `age` property.",
        "isCorrect": false,
        "explanation": "Correctly omitted. The `john` object has both `name` and `age` properties, as required by the `Person` interface."
      },
      {
        "id": "17f873db-5084-4137-9253-9a0aee65a2c8",
        "body": "The `greeting` variable has inferred type `string`.",
        "isCorrect": true,
        "explanation": "Correctly selected! Whilst assigning the returned value of `greet(john)` to `greeting` TypeScript infers the type of `greeting` as the `string`."
      },
      {
        "id": "7de4ce63-3fb0-40b2-b929-0c9b746ea6c1",
        "body": "The `greet` function can accept any type of parameter.",
        "isCorrect": false,
        "explanation": "Correctly omitted. The `greet` function is specifically designed to accept only objects that conform to the `Person` interface, ensuring type safety."
      }
    ],
    "hint": "Refer to the TypeScript documentation on interfaces and function parameter types to find information about defining and using interfaces, as well as specifying parameter types in function declarations."
  },
  {
    "id": "6e2f15c5-8c53-4a69-9f42-1b8a6b0e28cc",
    "difficulty": "medium",
    "type": "multipleChoice",
    "category": "typescript",
    "description": "Test your knowledge of TypeScript with this medium-difficulty question about advanced features and syntax.",
    "title": "Interface Shaping & Implementing",
    "body": "Consider the following TypeScript code that utilizes advanced features:\n\n```typescript\ninterface Shape {\n  area(): number;\n}\n\nclass Circle implements Shape {\n  constructor(private radius: number) {}\n\n  area(): number {\n    return Math.PI * this.radius ** 2;\n  }\n}\n\nclass Square implements Shape {\n  constructor(private sideLength: number) {}\n\n  area(): number {\n    return this.sideLength ** 2;\n  }\n}\n\nconst shapes: Shape[] = [new Circle(5), new Square(4)];\nconst totalArea: number = shapes.reduce((acc, shape) => acc + shape.area(), 0);\n``` \n\nWhich of the following statements about the given TypeScript code are correct?",
    "answers": [
      {
        "id": "c964899f-7ec4-4a7b-9224-1a6b1345c2e3",
        "body": "The `Shape` interface defines a method called `area`.",
        "isCorrect": true,
        "explanation": "Correct! The `Shape` interface specifies a method named `area`, which must be implemented by any class that implements the interface."
      },
      {
        "id": "5f2155bc-45c4-4a19-9d6d-2a7ceec4db99",
        "body": "The `Circle` class has a private property called `radius`.",
        "isCorrect": true,
        "explanation": "Correct! The `Circle` class has a private property `radius` that is used in the calculation of the area."
      },
      {
        "id": "e30b36c3-9b11-4d7e-961f-145a65d9c847",
        "body": "The `Square` class has a method called `calculateArea`.",
        "isCorrect": false,
        "explanation": "Incorrect. The `Square` class has a method named `area`, not `calculateArea`, which is used to calculate the area of the square."
      },
      {
        "id": "0f48e827-4d63-4ad0-89c3-8cbba251b0dd",
        "body": "The `shapes` array can contain only instances of the `Circle` class.",
        "isCorrect": false,
        "explanation": "Incorrect. The `shapes` array is an array of `Shape` instances, which can include both `Circle` and `Square` objects, as both classes implement the `Shape` interface."
      },
      {
        "id": "6d3d31eb-c5e4-4e63-8b04-5c7bdaefc1f1",
        "body": "The `totalArea` variable is implicitly typed as `number`.",
        "isCorrect": true,
        "explanation": "Correct! TypeScript can infer the type of the `totalArea` variable based on the result of the reduce operation, making the type annotation optional."
      },
      {
        "id": "68dd5970-49f2-43f3-8c54-5c1e17cf29b7",
        "body": "The `Square` class is missing the `area` method.",
        "isCorrect": false,
        "explanation": "Incorrect. The `Square` class does implement the `area` method, which is used to calculate the area of the square."
      }
    ],
    "hint": "Refer to the TypeScript documentation on interfaces, classes, and type inference to find information about defining interfaces with methods, implementing interfaces in classes, and type inference in variable declarations."
  }
]
